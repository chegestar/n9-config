#!/usr/bin/perl
use strict;
use warnings;

sub flashAndRootStrap($$$);
sub attemptSSH();
sub attemptWifi($);
sub slowInstalls();
sub usbDev();
sub run(@);
sub tryrun(@);

my @deps = qw(telnet expect rsync);

my $usage = "Usage:
  $0 FIRMWARE EMMC KERNEL
    flash firmware, emmc, and kernel indicated

  $0 -s|--ssh
     just attempt to ssh

  $0 -i|--installs
     skip flashAndRootStrap, and skip installing flasher and deps
     just attemp ssh, wifi, and slow installs
";

my $MODE_FLASH = "flash";
my $MODE_SSH = "ssh";
my $MODE_INSTALLS = "installs";

sub main(@){
  my ($fw, $emmc, $kernel);
  my $mode;
  if(@_ == 1 and $_[0] =~ /^(-s|--ssh)$/){
    $mode = $MODE_SSH;
  }elsif(@_ == 1 and $_[0] =~ /^(-i|--installs)$/){
    $mode = $MODE_INSTALLS;
  }elsif(@_ == 3){
    $mode = $MODE_FLASH;
    ($fw, $emmc, $kernel) = @_;
  }else{
    die $usage;
  }

  $|=1;

  if($mode eq $MODE_FLASH){
    run "sudo", "dpkg", "-i", "flasher_3.12.1_amd64.deb";
    run "sudo", "apt-get", "install", @deps;

    flashAndRootStrap $fw, $emmc, $kernel;
  }

  attemptSSH();

  if($mode eq $MODE_FLASH or $mode eq $MODE_INSTALLS){
    run "n9", "-t", "192.168.2.15";
    chdir "../";
    attemptWifi(3);
    slowInstalls();
  }
}

sub flashAndRootStrap($$$){
  my ($fw, $emmc, $kernel) = @_;

  $fw = readlink $fw if -l $fw;
  $emmc = readlink $emmc if -l $emmc;
  $kernel = readlink $kernel if -l $kernel;

  my $version = "\\d\\d.\\d\\d\\d\\d.\\d\\d-\\d";
  my $fwRegex = "DFL61_HARMATTAN_${version}_PR_LEGACY_00\\d-OEM1-958_ARM.bin";
  my $emmcRegex = "DFL61_HARMATTAN_${version}.[A-Z]+_EMMC_[A-Z]+.bin";
  my $kernelRegex = "zImage";
  die "weird firmware: $fw\n" if not -f $fw or $fw !~ /$fwRegex/;
  die "weird emmc: $emmc\n" if not -f $emmc or $emmc !~ /$emmcRegex/;
  die "weird kernel: $kernel\n" if not -f $kernel or $kernel !~ /$kernelRegex/;

  print "\n\n\nflashing firmware and emmc\n";
  run "sudo", "flasher", "-f", "-F", $fw, "-F", $emmc;

  print "\n\n\nflashing ubiboot and starting ubiboot maintenance console\n";
  run "./ubi-console", "--flash";

  print "\n\n\nmounting partitions and copying files for rootstrapping\n";
  tryrun "./ubi-mnt", "-u";
  tryrun "./ubi-mnt", "-u";
  run "./ubi-mnt", "-m";
  run "./ubi-rootstrap";
  run "./ubi-sshkeys";
  run "./ubi-mnt", "-u";

  print "\n\n\nrebooting and flashing kernel in the background\n";
  run "sudo flasher -f -F $fw -k $kernel --flash-only=kernel -R &";
  run "./ubi-cmd", "reboot2";
}

sub attemptSSH(){
  print "\n\n\nattempting to ssh\n";
  print "waiting for usb/enx device to appear in ifconfig -a\n";
  my $dev;
  while(not defined $dev){
    print ".";
    $dev = usbDev;
    sleep 1;
  }
  print "\n";
  run "sudo", "ifconfig", $dev, "192.168.2.14";
  print "usb network up!\n";

  my $host = `n9`;
  chomp $host;
  run "ssh-keygen", "-f", "$ENV{HOME}/.ssh/known_hosts", "-R", "192.168.2.15";
  run "ssh-keygen", "-f", "$ENV{HOME}/.ssh/known_hosts", "-R", $host;
  run "ssh", "-o", "StrictHostKeyChecking no",
    "root\@192.168.2.15", "passwd -d user";
  my $out = `ssh user\@192.168.2.15 'whoami; hostname; echo YAY'`;
  if($out eq "user\nRM696\nYAY\n"){
    print "\n\n\nSUCCESSFUL SSH\n";
  }else{
    die "couldnt ssh\n";
  }
}

sub attemptWifi($){
  my $attempts = shift;
  print "\n\nattempting to switch to wifi\n";
  print "waiting for icd2\n";
  while(1){
    print ".";
    system "n9 -s pgrep icd2 > /dev/null";
    last if $? == 0;
    sleep 1;
  }
  print "icd2 is runnning\n";

  run "n9", "-s", "/sbin/initctl stop xsession/icd2";
  run "./sync-wifi";
  run "n9", "-s", "/sbin/initctl start xsession/icd2";

  my $limit = 30;
  print "waiting for wifi, stopping after ${limit}s\n";
  my $start = time;
  while(1){
    my $wlan = `n9 -s ifconfig wlan0`;
    print ".";
    last if $wlan =~ /inet addr:\d+.\d+.\d+.\d+/;
    last if time-$start > $limit;
    sleep 1;
  }
  my $wlan = `n9 -s ifconfig wlan0`;
  if($wlan =~ /inet addr:\d+.\d+.\d+.\d+/){
    print "\n\n\nSUCCESSFUL WIFI!\n";
  }elsif($attempts > 0){
    print "\nretrying wifi $attempts more time(s)..\n";
    attemptWifi($attempts - 1);
  }else{
    print "\n\n\nNO WIFI, continuing without\n";
  }
}

sub slowInstalls(){
  print "\n\nrunning time-consuming stuff\n";
  print "respawn-limit, packages {twice}, config-files\n";
  run "./respawn-limit";
  run "./packages.pl";
  run "./packages.pl";
  run "./config-files";
}

sub usbDev(){
  my @ifconfigLines = `ifconfig -a`;
  for my $line(@ifconfigLines){
    return $1 if $line =~ /^(usb\d+):?\s/;
  }
  for my $line(@ifconfigLines){
    return $1 if $line =~ /^(enx[0-9a-f]+):?\s/;
  }
  return undef;
}

sub run(@){
  tryrun @_;
  die "@_ failed\n" if $? != 0;
}
sub tryrun(@){
  print "@_\n";
  system @_;
}

&main(@ARGV);
