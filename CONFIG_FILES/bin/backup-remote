#!/usr/bin/perl
use strict;
use warnings;

my @sshOpts = map {("-o", $_)} (
  "LogLevel=ERROR",
  "NoHostAuthenticationForLocalhost=yes",
  "UserKnownHostsFile=/dev/null",
  "StrictHostKeyChecking=no",
);

my $maxTimeout = 30;
my $secretsFile = "$ENV{HOME}/.secrets";
my @configKeys = ("revtun.portfile");
my $remoteUser = "wolke";
my $remoteHost = "wolke-nuc";

my $backupDir = "~/backup-n9";
my $dcimDir = "/home/user/MyDocs/DCIM";

my $lastSuccessFile = "/home/user/.cache/backup-last-success";

sub ensureConnection($);
sub getLocalPort($);
sub sshCmd($@);
sub rsyncCmd($$$);
sub readSecrets();
sub run(@);
sub tryRun(@);
sub readProc(@);
sub tryReadProc(@);
sub tryReadProcQuiet(@);
sub fail($);

sub main(@){
  run "date";
  run "bat";

  ######
  my $config = readSecrets();
  run "sudo", "screen-cmd", "-q", "revtun", "-r", "--unsafe", "--local";
  run "sudo", "screen-cmd", "revtun", "-r", "--unsafe", "--local";
  ensureConnection($config);
  run sshCmd($config, "mkdir", "-p", $backupDir);
  ######

  ######
  run rsyncCmd($config, "$dcimDir/", "$backupDir/DCIM"),
    "--exclude=/*/";
  ######

  ######
  my $callFile = "/tmp/backup-call-tmp";
  run "backup-comm-n9e", "call", $callFile;
  run rsyncCmd($config, $callFile, $backupDir);
  ######

  ######
  my $smsFile = "/tmp/backup-sms-tmp";
  run "backup-comm-n9e", "sms", $smsFile;
  run rsyncCmd($config, $smsFile, $backupDir);
  #######

  ######
  run "sudo", "screen-cmd", "-q", "revtun", "--unsafe", "--local";
  system "echo " . nowHrMin() . " > $lastSuccessFile";
  ######

  run "date";
  run "bat";
}

sub ensureConnection($){
  my $config = shift;
  my $host = "";
  my $start = time;
  $| = 1; #autoflush
  print "trying to connect to $remoteHost\n";
  while(time - $start < $maxTimeout){
    print ".";
    my @hostnameCmd = sshCmd($config, "hostname");
    $host = tryReadProcQuiet "@hostnameCmd 2>/dev/null";
    last if $? == 0;
    sleep 1;
  }
  print "\n";
  if($host ne $remoteHost){
    my @hostnameCmd = sshCmd($config, "hostname");
    $host = tryReadProc @hostnameCmd;
  }
  fail "Failed to connect to $remoteHost\n" if $host ne $remoteHost;
  print "connected!\n";
}

sub getLocalPort($){
  my $config = shift;
  my $file = $$config{'revtun.portfile'};
  fail "missing revtun.portfile: $file\n" if not -f $file;
  my $port = `cat $file`;
  chomp $port;
  fail "malformed port: $port\n" if $port !~ /^\d+$/;
  return $port;
}

sub sshCmd($@){
  my ($config, @cmd) = @_;
  my $port = getLocalPort $config;
  return ("ssh", "$remoteUser\@localhost",
      "-p", $port,
      @sshOpts,
      @cmd);
}

sub rsyncCmd($$$){
  my ($config, $src, $dest) = @_;
  my $port = getLocalPort $config;
  return ("rsync",
    "-e", "ssh -p $port @sshOpts",
    "-avP", $src, "$remoteUser\@localhost:$dest");
}


sub readSecrets(){
  my @lines = `cat $secretsFile 2>/dev/null`;
  my $cfg = {};
  my $okConfigKeys = join "|", @configKeys;
  for my $line(@lines){
    if($line =~ /^($okConfigKeys)\s*=\s*(.+)$/){
      $$cfg{$1} = $2;
    }
  }
  for my $key(sort @configKeys){
    fail "Missing config '$key' in $secretsFile\n" if not defined $$cfg{$key};
  }
  return $cfg;
}

sub run(@){
  tryRun @_;
  fail "Error running @_\n" if $? != 0;
}

sub tryRun(@){
  print "@_\n";
  system @_;
}

sub readProc(@){
  my $out = tryReadProc @_;
  fail "Error running @_\n" if $? != 0;
  return $out;
}

sub tryReadProc(@){
  print "@_\n";
  tryReadProcQuiet @_;
}
sub tryReadProcQuiet(@){
  open PROC, "-|", @_;
  my @lines = <PROC>;
  close PROC;

  my $out = join '', @lines;
  chomp $out if @lines == 1;
  return $out;
}
sub fail($){
  my ($msg) = @_;
  chomp $msg;
  die "$msg\n";
}

&main(@ARGV);
