#!/usr/bin/perl
use strict;
use warnings;

sub createMsgSymlinks();
sub formatHeader($);
sub parseHeader($);
sub removeUSCountryCode($);
sub run(@);

my $dir = "$ENV{HOME}/Code/n9";
my $mmsLocal = "$dir/backup/backup-mms";
my $mmsRemote = "/home/user/.mms";

my $msgByDateDir = "$mmsLocal/msg-bydate";

my @rsyncOpts = qw(
  -a --no-owner --no-group
  -v -P
  --exclude=private/
);

sub main(@){
  my $host = `n9`;
  chomp $host;

  my $local = $mmsLocal;
  my $remote = "user\@$host:$mmsRemote";

  run "rsync", @rsyncOpts, "$remote/", $local;

  createMsgSymlinks();

  run "rsync", @rsyncOpts, "$local/", $remote;
}

sub createMsgSymlinks(){
  run "rm", "-rf", $msgByDateDir;
  run "mkdir", "-p", $msgByDateDir;
  for my $msgDir(glob "$mmsLocal/msg/*"){
    my $id = $1 if $msgDir =~ /([^\/]+)$/;
    my $mtime = (stat $msgDir)[9];

    my $headerFile = "$msgDir/header";
    my $header;
    if(-f $headerFile){
      $header = parseHeader $headerFile;
    }else{
      $header = {
        from      => [],
        to        => [],
        timestamp => $mtime,
        subject   => "",
      };
    }
    my $symName = formatHeader $header;

    run "ln", "-s", "../msg/$id", "$msgByDateDir/$symName";
  }
}

sub formatHeader($){
  my ($header) = @_;
  my @from = @{$$header{from}};
  my $fromFmt = join ",", @from;
  $fromFmt = "UNKNOWN" if @from == 0;

  my @to = @{$$header{to}};
  my $toFmt = join ",", @to;
  $toFmt = "UNKNOWN" if @to == 0;

  my $timestamp = $$header{timestamp};
  my $dateFmt = `date --date=\@$timestamp +%Y%m%d_%H_%M_%S`;
  chomp $dateFmt;

  my $subjectFmt = $$header{subject};
  $subjectFmt =~ s/^\s*no\s*subject\s*$//i;
  $subjectFmt =~ s/\W+/_/g;
  $subjectFmt =~ s/^_+//g;
  $subjectFmt =~ s/_+$//g;
  $subjectFmt = "none" if length $subjectFmt == 0;

  return "$dateFmt-$fromFmt-$toFmt-$subjectFmt";
}

sub parseHeader($){
  my $headerFile = shift;
  open FH, "< $headerFile" or die "Could not read $headerFile\n";
  my $hdr = join '', <FH>;
  close FH;

  my $numRe = "\\+?\\d+";
  my $numListRe = "(?:$numRe\\s*,\\s*)*$numRe";

  my $from = $1 if $hdr =~ /^message-from\s*=\s*($numListRe)\s*$/m;
  my $to = $1 if $hdr =~ /^message-to\s*=\s*($numListRe)$/m;
  my $subject = $1 if $hdr =~ /^message-subject\s*=\s*(.+)$/m;
  my $timestamp = $1 if $hdr =~ /^message-timestamp\s*=\s*(\d+)$/m;

  my @fromList = map {removeUSCountryCode $_} $from =~ /$numRe/g;
  my @toList = map {removeUSCountryCode $_} $to =~ /$numRe/g;

  return {
    from      => [@fromList],
    to        => [@toList],
    subject   => $subject,
    timestamp => $timestamp,
  };
}

sub removeUSCountryCode($){
  my $num = shift;
  $num =~ s/^\s*//;
  $num =~ s/^\+?1?(\d{10})$/$1/;
  return $num;
}

sub run(@){
  print "@_\n";
  system @_;
  die "failed" if $? != 0;
}

&main(@ARGV);
